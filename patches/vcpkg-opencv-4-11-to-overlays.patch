diff -urN vcpkg/ports/opencv4/custom-001-barcode-detector-model-from-buffer.patch vcpkg-overlays/opencv4/custom-001-barcode-detector-model-from-buffer.patch
--- vcpkg/ports/opencv4/custom-001-barcode-detector-model-from-buffer.patch	1970-01-01 00:00:00.000000000 +0000
+++ vcpkg-overlays/opencv4/custom-001-barcode-detector-model-from-buffer.patch	2025-04-05 02:45:09.140258600 +0100
@@ -0,0 +1,100 @@
+diff --git a/modules/objdetect/include/opencv2/objdetect/barcode.hpp b/modules/objdetect/include/opencv2/objdetect/barcode.hpp
+index c20b67c0b2..a1978293cb 100644
+--- a/modules/objdetect/include/opencv2/objdetect/barcode.hpp
++++ b/modules/objdetect/include/opencv2/objdetect/barcode.hpp
+@@ -6,6 +6,8 @@
+ #ifndef OPENCV_OBJDETECT_BARCODE_HPP
+ #define OPENCV_OBJDETECT_BARCODE_HPP
+ 
++#include <string_view>
++
+ #include <opencv2/core.hpp>
+ #include <opencv2/objdetect/graphical_code_detector.hpp>
+ 
+@@ -24,10 +26,10 @@ public:
+     /** @brief Initialize the BarcodeDetector.
+      *
+      * Parameters allow to load _optional_ Super Resolution DNN model for better quality.
+-     * @param prototxt_path prototxt file path for the super resolution model
+-     * @param model_path model file path for the super resolution model
++     * @param prototxt prototxt file path for the super resolution model
++     * @param model model file path for the super resolution model
+      */
+-    CV_WRAP BarcodeDetector(CV_WRAP_FILE_PATH const std::string &prototxt_path, CV_WRAP_FILE_PATH const std::string &model_path);
++    CV_WRAP BarcodeDetector(std::string_view prototxt_path, std::string_view model_path);
+     ~BarcodeDetector();
+ 
+     /** @brief Decodes barcode in image once it's found by the detect() method.
+diff --git a/modules/objdetect/src/barcode.cpp b/modules/objdetect/src/barcode.cpp
+index 1b963e4242..04f87ec073 100644
+--- a/modules/objdetect/src/barcode.cpp
++++ b/modules/objdetect/src/barcode.cpp
+@@ -343,16 +343,14 @@ BarcodeDetector::BarcodeDetector()
+ {
+ }
+ 
+-BarcodeDetector::BarcodeDetector(const string &prototxt_path, const string &model_path)
++BarcodeDetector::BarcodeDetector(std::string_view prototxt, std::string_view model)
+ {
+     Ptr<BarcodeImpl> p_ = new BarcodeImpl();
+     p = p_;
+     p_->sr = make_shared<SuperScale>();
+-    if (!prototxt_path.empty() && !model_path.empty())
++    if (!prototxt.empty() && !model.empty())
+     {
+-        CV_Assert(utils::fs::exists(prototxt_path));
+-        CV_Assert(utils::fs::exists(model_path));
+-        int res = p_->sr->init(prototxt_path, model_path);
++        int res = p_->sr->init(prototxt, model);
+         CV_Assert(res == 0);
+         p_->use_nn_sr = true;
+     }
+diff --git a/modules/objdetect/src/barcode_decoder/common/super_scale.cpp b/modules/objdetect/src/barcode_decoder/common/super_scale.cpp
+index 4b7099a27d..940c4f235b 100644
+--- a/modules/objdetect/src/barcode_decoder/common/super_scale.cpp
++++ b/modules/objdetect/src/barcode_decoder/common/super_scale.cpp
+@@ -1,3 +1,5 @@
++#include <string_view>
++
+ // This file is part of OpenCV project.
+ // It is subject to the license terms in the LICENSE file found in the top-level directory
+ // of this distribution and at http://opencv.org/license.html.
+@@ -18,9 +20,9 @@ namespace barcode {
+ 
+ constexpr static float MAX_SCALE = 4.0f;
+ 
+-int SuperScale::init(const std::string &proto_path, const std::string &model_path)
++int SuperScale::init(std::string_view proto, std::string_view model)
+ {
+-    srnet_ = dnn::readNetFromCaffe(proto_path, model_path);
++    srnet_ = dnn::readNetFromCaffe(proto.data(), proto.size(), model.data(), model.size());
+     net_loaded_ = true;
+     return 0;
+ }
+@@ -77,10 +79,10 @@ int SuperScale::superResolutionScale(const Mat &src, Mat &dst)
+ 
+ #else // HAVE_OPENCV_DNN
+ 
+-int SuperScale::init(const std::string &proto_path, const std::string &model_path)
++int SuperScale::init(std::string_view proto, std::string_view model)
+ {
+-    CV_UNUSED(proto_path);
+-    CV_UNUSED(model_path);
++    CV_UNUSED(proto);
++    CV_UNUSED(model);
+     return 0;
+ }
+ 
+diff --git a/modules/objdetect/src/barcode_decoder/common/super_scale.hpp b/modules/objdetect/src/barcode_decoder/common/super_scale.hpp
+index 024ea86e54..45340c87fa 100644
+--- a/modules/objdetect/src/barcode_decoder/common/super_scale.hpp
++++ b/modules/objdetect/src/barcode_decoder/common/super_scale.hpp
+@@ -22,7 +22,7 @@ public:
+ 
+     ~SuperScale() = default;
+ 
+-    int init(const std::string &proto_path, const std::string &model_path);
++    int init(std::string_view proto, std::string_view model);
+ 
+     void processImageScale(const Mat &src, Mat &dst, float scale, const bool &use_sr, int sr_max_size = 160);
+ 
diff -urN vcpkg/ports/opencv4/custom-002-contrib-wechat-qrcode-models-from-buffer.patch vcpkg-overlays/opencv4/custom-002-contrib-wechat-qrcode-models-from-buffer.patch
--- vcpkg/ports/opencv4/custom-002-contrib-wechat-qrcode-models-from-buffer.patch	1970-01-01 00:00:00.000000000 +0000
+++ vcpkg-overlays/opencv4/custom-002-contrib-wechat-qrcode-models-from-buffer.patch	2025-04-05 02:45:09.142211700 +0100
@@ -0,0 +1,163 @@
+diff --git a/modules/wechat_qrcode/include/opencv2/wechat_qrcode.hpp b/modules/wechat_qrcode/include/opencv2/wechat_qrcode.hpp
+index 676104c..43d87ef 100644
+--- a/modules/wechat_qrcode/include/opencv2/wechat_qrcode.hpp
++++ b/modules/wechat_qrcode/include/opencv2/wechat_qrcode.hpp
+@@ -33,10 +33,10 @@ public:
+      * @param super_resolution_prototxt_path prototxt file path for the super resolution model
+      * @param super_resolution_caffe_model_path caffe file path for the super resolution model
+      */
+-    CV_WRAP WeChatQRCode(const std::string& detector_prototxt_path = "",
+-                         const std::string& detector_caffe_model_path = "",
+-                         const std::string& super_resolution_prototxt_path = "",
+-                         const std::string& super_resolution_caffe_model_path = "");
++    CV_WRAP WeChatQRCode(std::string_view detector_prototxt,
++                         std::string_view detector_caffe_model,
++                         std::string_view super_resolution_prototxt,
++                         std::string_view super_resolution_caffe_model);
+     ~WeChatQRCode(){};
+ 
+     /**
+diff --git a/modules/wechat_qrcode/src/detector/ssd_detector.cpp b/modules/wechat_qrcode/src/detector/ssd_detector.cpp
+index dca1851..58aad88 100644
+--- a/modules/wechat_qrcode/src/detector/ssd_detector.cpp
++++ b/modules/wechat_qrcode/src/detector/ssd_detector.cpp
+@@ -1,3 +1,5 @@
++#include <string_view>
++
+ // This file is part of OpenCV project.
+ // It is subject to the license terms in the LICENSE file found in the top-level directory
+ // of this distribution and at http://opencv.org/license.html.
+@@ -9,8 +11,8 @@
+ #define CLIP(x, x1, x2) max(x1, min(x, x2))
+ namespace cv {
+ namespace wechat_qrcode {
+-int SSDDetector::init(const string& proto_path, const string& model_path) {
+-    net_ = dnn::readNetFromCaffe(proto_path, model_path);
++int SSDDetector::init(std::string_view proto, std::string_view model) {
++    net_ = dnn::readNetFromCaffe(proto.data(),proto.size(), model.data(), model.size());
+     return 0;
+ }
+ 
+diff --git a/modules/wechat_qrcode/src/detector/ssd_detector.hpp b/modules/wechat_qrcode/src/detector/ssd_detector.hpp
+index e510cb3..252ba26 100644
+--- a/modules/wechat_qrcode/src/detector/ssd_detector.hpp
++++ b/modules/wechat_qrcode/src/detector/ssd_detector.hpp
+@@ -8,8 +8,9 @@
+ #ifndef __DETECTOR_SSD_DETECTOR_HPP_
+ #define __DETECTOR_SSD_DETECTOR_HPP_
+ 
+-#include <stdio.h>
++#include <string_view>
+ 
++#include <stdio.h>
+ #include "opencv2/dnn.hpp"
+ #include "opencv2/imgproc.hpp"
+ namespace cv {
+@@ -19,7 +20,7 @@ class SSDDetector {
+ public:
+     SSDDetector(){};
+     ~SSDDetector(){};
+-    int init(const std::string& proto_path, const std::string& model_path);
++    int init(std::string_view proto, std::string_view model);
+     std::vector<Mat> forward(Mat img, const int target_width, const int target_height);
+ 
+ private:
+diff --git a/modules/wechat_qrcode/src/scale/super_scale.cpp b/modules/wechat_qrcode/src/scale/super_scale.cpp
+index 8b3b113..1fe71d8 100644
+--- a/modules/wechat_qrcode/src/scale/super_scale.cpp
++++ b/modules/wechat_qrcode/src/scale/super_scale.cpp
+@@ -1,3 +1,5 @@
++#include <string_view>
++
+ // This file is part of OpenCV project.
+ // It is subject to the license terms in the LICENSE file found in the top-level directory
+ // of this distribution and at http://opencv.org/license.html.
+@@ -7,12 +9,11 @@
+ #include "../precomp.hpp"
+ #include "super_scale.hpp"
+ 
+-
+ #define CLIP(x, x1, x2) max(x1, min(x, x2))
+ namespace cv {
+ namespace wechat_qrcode {
+-int SuperScale::init(const std::string &proto_path, const std::string &model_path) {
+-    srnet_ = dnn::readNetFromCaffe(proto_path, model_path);
++int SuperScale::init(std::string_view proto, std::string_view model) {
++    srnet_ = dnn::readNetFromCaffe(proto.data(), proto.size(), model.data(), model.size());
+     net_loaded_ = true;
+     return 0;
+ }
+diff --git a/modules/wechat_qrcode/src/scale/super_scale.hpp b/modules/wechat_qrcode/src/scale/super_scale.hpp
+index 2717932..9e7a654 100644
+--- a/modules/wechat_qrcode/src/scale/super_scale.hpp
++++ b/modules/wechat_qrcode/src/scale/super_scale.hpp
+@@ -8,6 +8,8 @@
+ #ifndef __SCALE_SUPER_SCALE_HPP_
+ #define __SCALE_SUPER_SCALE_HPP_
+ 
++#include <string_view>
++
+ #include <stdio.h>
+ #include "opencv2/dnn.hpp"
+ #include "opencv2/imgproc.hpp"
+@@ -18,7 +20,7 @@ class SuperScale {
+ public:
+     SuperScale(){};
+     ~SuperScale(){};
+-    int init(const std::string &proto_path, const std::string &model_path);
++    int init(std::string_view proto, std::string_view model);
+     Mat processImageScale(const Mat &src, float scale, const bool &use_sr, int sr_max_size = 160);
+ 
+ private:
+diff --git a/modules/wechat_qrcode/src/wechat_qrcode.cpp b/modules/wechat_qrcode/src/wechat_qrcode.cpp
+index 64aad73..66cf86c 100644
+--- a/modules/wechat_qrcode/src/wechat_qrcode.cpp
++++ b/modules/wechat_qrcode/src/wechat_qrcode.cpp
+@@ -1,3 +1,5 @@
++#include <string_view>
++
+ // This file is part of OpenCV project.
+ // It is subject to the license terms in the LICENSE file found in the top-level directory
+ // of this distribution and at http://opencv.org/license.html.
+@@ -47,18 +49,16 @@ public:
+     float scaleFactor = -1.f;
+ };
+ 
+-WeChatQRCode::WeChatQRCode(const String& detector_prototxt_path,
+-                           const String& detector_caffe_model_path,
+-                           const String& super_resolution_prototxt_path,
+-                           const String& super_resolution_caffe_model_path) {
++WeChatQRCode::WeChatQRCode(std::string_view detector_prototxt,
++                           std::string_view detector_caffe_model,
++                           std::string_view super_resolution_prototxt,
++                           std::string_view super_resolution_caffe_model) {
+     p = makePtr<WeChatQRCode::Impl>();
+-    if (!detector_caffe_model_path.empty() && !detector_prototxt_path.empty()) {
++    if (!detector_caffe_model.empty() && !detector_prototxt.empty()) {
+         // initialize detector model (caffe)
+         p->use_nn_detector_ = true;
+-        CV_Assert(utils::fs::exists(detector_prototxt_path));
+-        CV_Assert(utils::fs::exists(detector_caffe_model_path));
+         p->detector_ = make_shared<SSDDetector>();
+-        auto ret = p->detector_->init(detector_prototxt_path, detector_caffe_model_path);
++        auto ret = p->detector_->init(detector_prototxt, detector_caffe_model);
+         CV_Assert(ret == 0);
+     } else {
+         p->use_nn_detector_ = false;
+@@ -68,13 +68,11 @@ WeChatQRCode::WeChatQRCode(const String& detector_prototxt_path,
+     // it could also support non model weights by cubic resizing
+     // so, we initialize it first.
+     p->super_resolution_model_ = make_shared<SuperScale>();
+-    if (!super_resolution_prototxt_path.empty() && !super_resolution_caffe_model_path.empty()) {
++    if (!super_resolution_prototxt.empty() && !super_resolution_caffe_model.empty()) {
+         p->use_nn_sr_ = true;
+         // initialize dnn model (caffe format)
+-        CV_Assert(utils::fs::exists(super_resolution_prototxt_path));
+-        CV_Assert(utils::fs::exists(super_resolution_caffe_model_path));
+-        auto ret = p->super_resolution_model_->init(super_resolution_prototxt_path,
+-                                                    super_resolution_caffe_model_path);
++        auto ret = p->super_resolution_model_->init(super_resolution_prototxt,
++                                                    super_resolution_caffe_model);
+         CV_Assert(ret == 0);
+     } else {
+         p->use_nn_sr_ = false;
diff -urN vcpkg/ports/opencv4/portfile.cmake vcpkg-overlays/opencv4/portfile.cmake
--- vcpkg/ports/opencv4/portfile.cmake	2025-05-04 15:24:01.941987600 +0100
+++ vcpkg-overlays/opencv4/portfile.cmake	2025-05-05 12:11:29.638765000 +0100
@@ -22,6 +22,7 @@
       0015-fix-freetype.patch
       0017-fix-flatbuffers.patch
       0019-opencl-kernel.patch
+      custom-001-barcode-detector-model-from-buffer.patch
 )
 
 vcpkg_find_acquire_program(PKGCONFIG)
@@ -185,6 +186,7 @@
       0013-contrib-fix-ogre.patch
       0016-contrib-fix-freetype.patch
       0018-contrib-fix-tesseract.patch
+      custom-002-contrib-wechat-qrcode-models-from-buffer.patch
   )
 
   set(BUILD_WITH_CONTRIB_FLAG "-DOPENCV_EXTRA_MODULES_PATH=${CONTRIB_SOURCE_PATH}/modules")
@@ -338,9 +340,9 @@
 endif()
 
 if("contrib" IN_LIST FEATURES)
-  if(VCPKG_TARGET_IS_UWP)
+  #if(VCPKG_TARGET_IS_UWP) -- Force Tesseract OFF
     list(APPEND ADDITIONAL_BUILD_FLAGS "-DWITH_TESSERACT=OFF")
-  endif()
+  #endif()
 endif()
 
 vcpkg_cmake_configure(
@@ -474,12 +476,16 @@
 if("ade" IN_LIST FEATURES)
   string(APPEND DEPS_STRING "\nfind_dependency(ade)")
 endif()
-if("contrib" IN_LIST FEATURES AND NOT VCPKG_TARGET_IS_UWP AND NOT VCPKG_TARGET_IS_IOS AND NOT (VCPKG_TARGET_IS_WINDOWS AND VCPKG_TARGET_ARCHITECTURE MATCHES "^arm"))
-  string(APPEND DEPS_STRING "
-# C language is required for try_compile tests in FindHDF5
-enable_language(C)
-find_dependency(HDF5)
-find_dependency(Tesseract)")
+# Skip HDF5 and Tesseract but ensure that iconv is added
+# if("contrib" IN_LIST FEATURES AND NOT VCPKG_TARGET_IS_UWP AND NOT VCPKG_TARGET_IS_IOS AND NOT (VCPKG_TARGET_IS_WINDOWS AND VCPKG_TARGET_ARCHITECTURE MATCHES "^arm"))
+#   string(APPEND DEPS_STRING "
+# # C language is required for try_compile tests in FindHDF5
+# enable_language(C)
+# find_dependency(HDF5)
+# find_dependency(Tesseract)")
+# endif()
+if(VCPKG_TARGET_IS_LINUX)
+  string(APPEND DEPS_STRING "\nfind_package(Iconv)")
 endif()
 if("eigen" IN_LIST FEATURES)
   string(APPEND DEPS_STRING "\nfind_dependency(Eigen3 CONFIG)")
diff -urN vcpkg/ports/opencv4/vcpkg.json vcpkg-overlays/opencv4/vcpkg.json
--- vcpkg/ports/opencv4/vcpkg.json	2025-05-04 15:24:01.944917300 +0100
+++ vcpkg-overlays/opencv4/vcpkg.json	2025-05-04 15:38:48.394553400 +0100
@@ -94,10 +94,6 @@
           "features": [
             "calib3d"
           ]
-        },
-        {
-          "name": "tesseract",
-          "platform": "!uwp & !(windows & (arm | arm64)) & !ios"
         }
       ]
     },
