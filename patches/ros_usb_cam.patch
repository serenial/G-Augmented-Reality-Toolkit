diff --git a/include/usb_cam/conversions.hpp b/include/usb_cam/conversions.hpp
index 4cf1ba9..75fa684 100644
--- a/include/usb_cam/conversions.hpp
+++ b/include/usb_cam/conversions.hpp
@@ -45,19 +45,7 @@ namespace conversions
 {
 
 
-std::string FCC2S(const unsigned int & val)
-{
-  std::string s;
-
-  s += val & 0x7f;
-  s += (val >> 8) & 0x7f;
-  s += (val >> 16) & 0x7f;
-  s += (val >> 24) & 0x7f;
-  if (val & (1 << 31)) {
-    s += "-BE";
-  }
-  return s;
-}
+std::string FCC2S(const unsigned int &);
 
 }  // namespace conversions
 }  // namespace usb_cam
diff --git a/include/usb_cam/usb_cam.hpp b/include/usb_cam/usb_cam.hpp
index 1663e0f..37f922e 100644
--- a/include/usb_cam/usb_cam.hpp
+++ b/include/usb_cam/usb_cam.hpp
@@ -78,23 +78,7 @@ using usb_cam::formats::M4202RGB;
 
 /// @brief list all supported formats that this driver supports
 std::vector<std::shared_ptr<pixel_format_base>> driver_supported_formats(
-  const formats::format_arguments_t & args = formats::format_arguments_t())
-{
-  std::vector<std::shared_ptr<pixel_format_base>> fmts = {
-    std::make_shared<RGB8>(args),
-    std::make_shared<YUYV>(args),
-    std::make_shared<YUYV2RGB>(args),
-    std::make_shared<UYVY>(args),
-    std::make_shared<UYVY2RGB>(args),
-    std::make_shared<MONO8>(args),
-    std::make_shared<MONO16>(args),
-    std::make_shared<Y102MONO8>(args),
-    std::make_shared<RAW_MJPEG>(args),
-    std::make_shared<MJPEG2RGB>(args),
-    std::make_shared<M4202RGB>(args),
-  };
-  return fmts;
-}
+  const formats::format_arguments_t & args = formats::format_arguments_t());
 
 typedef struct
 {
diff --git a/include/usb_cam/utils.hpp b/include/usb_cam/utils.hpp
index add1ff9..caab5f8 100644
--- a/include/usb_cam/utils.hpp
+++ b/include/usb_cam/utils.hpp
@@ -122,9 +122,10 @@ inline int xioctl(int fd, uint64_t request, void * arg)
 
   do {
     r = ioctl(fd, request, arg);
+    auto x = errno;
     continue;
   } while (-1 == r && EINTR == errno);
-
+  
   return r;
 }
 
diff --git a/src/conversions.cpp b/src/conversions.cpp
new file mode 100644
index 0000000..518fc7f
--- /dev/null
+++ b/src/conversions.cpp
@@ -0,0 +1,15 @@
+#include "usb_cam/conversions.hpp"
+
+std::string usb_cam::conversions::FCC2S(const unsigned int & val)
+{
+  std::string s;
+
+  s += val & 0x7f;
+  s += (val >> 8) & 0x7f;
+  s += (val >> 16) & 0x7f;
+  s += (val >> 24) & 0x7f;
+  if (val & (1 << 31)) {
+    s += "-BE";
+  }
+  return s;
+}
\ No newline at end of file
diff --git a/src/usb_cam.cpp b/src/usb_cam.cpp
index b82cdf6..f8de619 100644
--- a/src/usb_cam.cpp
+++ b/src/usb_cam.cpp
@@ -438,14 +438,14 @@ void UsbCam::init_device()
   // Set v4l2 capture format
   // Note VIDIOC_S_FMT may change width and height
   if (-1 == usb_cam::utils::xioctl(m_fd, static_cast<int>(VIDIOC_S_FMT), &m_image.v4l2_fmt)) {
-    throw strerror(errno);
+    throw std::runtime_error(strerror(errno));
   }
 
   struct v4l2_streamparm stream_params;
   memset(&stream_params, 0, sizeof(stream_params));
   stream_params.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
   if (usb_cam::utils::xioctl(m_fd, static_cast<int>(VIDIOC_G_PARM), &stream_params) < 0) {
-    throw strerror(errno);
+    throw std::runtime_error(strerror(errno));
   }
 
   if (!stream_params.parm.capture.capability && V4L2_CAP_TIMEPERFRAME) {
@@ -482,7 +482,7 @@ void UsbCam::close_device()
   if (m_fd == -1) {return;}
 
   if (-1 == close(m_fd)) {
-    throw strerror(errno);
+    throw std::runtime_error(strerror(errno));
   }
 
   m_fd = -1;
@@ -493,17 +493,17 @@ void UsbCam::open_device()
   struct stat st;
 
   if (-1 == stat(m_device_name.c_str(), &st)) {
-    throw strerror(errno);
+    throw std::runtime_error(strerror(errno));
   }
 
   if (!S_ISCHR(st.st_mode)) {
-    throw strerror(errno);
+    throw std::runtime_error(strerror(errno));
   }
 
   m_fd = open(m_device_name.c_str(), O_RDWR /* required */ | O_NONBLOCK, 0);
 
   if (-1 == m_fd) {
-    throw strerror(errno);
+    throw std::runtime_error(strerror(errno));
   }
 }
 
@@ -731,4 +731,23 @@ bool UsbCam::set_v4l_parameter(const std::string & param, const std::string & va
   return retcode;
 }
 
+std::vector<std::shared_ptr<pixel_format_base>> driver_supported_formats(
+  const formats::format_arguments_t & args )
+{
+  std::vector<std::shared_ptr<pixel_format_base>> fmts = {
+    std::make_shared<RGB8>(args),
+    std::make_shared<YUYV>(args),
+    std::make_shared<YUYV2RGB>(args),
+    std::make_shared<UYVY>(args),
+    std::make_shared<UYVY2RGB>(args),
+    std::make_shared<MONO8>(args),
+    std::make_shared<MONO16>(args),
+    std::make_shared<Y102MONO8>(args),
+    std::make_shared<RAW_MJPEG>(args),
+    std::make_shared<MJPEG2RGB>(args),
+    std::make_shared<M4202RGB>(args),
+  };
+  return fmts;
+}
+
 }  // namespace usb_cam
